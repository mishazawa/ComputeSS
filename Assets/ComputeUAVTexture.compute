#pragma kernel ComputeFluid

#define DAMPING .99
#define AMPLITUDE .5

Texture2D<float4> InputBuffer;
SamplerState samplerInputBuffer;
RWTexture2D<float4> OutputBuffer;

float2 mouse = float2(0, 0);
float2 resolution = float2(32, 1);
bool action = false;

float cubicPulse( float c, float w, float x ){
    x = abs(x - c);
    if( x>w ) return 0.0;
    x /= w;
    return 1. - x*x*(3.0-2.0*x);
}

[numthreads(32, 1, 1)]
void ComputeFluid (uint3 id : SV_DispatchThreadID)
{
    float2 offset    = float2(1 / resolution.x, 0);
    float2 uv        = float2(id.xy) / resolution;
    float2 cursor    = (mouse + .5);

    float4 data      = InputBuffer.SampleLevel(samplerInputBuffer, uv, 0);
    float4 dataLeft  = InputBuffer.SampleLevel(samplerInputBuffer, uv - offset, 0);
    float4 dataRight = InputBuffer.SampleLevel(samplerInputBuffer, uv + offset, 0);

    float newValue  = dataLeft.x + dataRight.x - data.y;

    float nextValue = data.x;

    float attack = cubicPulse(cursor.x, 0.1, uv.x) * AMPLITUDE * (1. - cursor.y);

    OutputBuffer[id.xy] = float4(newValue * DAMPING, nextValue + attack, 0, 1);
}
